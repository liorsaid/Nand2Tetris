class Target {
    field int y;
    field int speed;
    field int score;

    // Target's constructor
    constructor Target new(int Aspeed) {
        let y = 0;
        let speed = Aspeed;
        return this;
    }

    // Draws the target
    method void draw_target() {
        do Screen.setColor(true);
        do Screen.drawRectangle(504, y, 511, (y + 95));
        do Screen.drawRectangle(496, (y + 16), 503, (y + 79));
        do Screen.drawRectangle(488, (y + 32), 495, (y + 63));
        do Screen.drawRectangle(484, (y + 40), 487, (y + 55));
        do Screen.setColor(false);
        do Screen.drawRectangle(491, (y + 35), 493, (y + 60));
        return;
    }

    // Moves the target up and down, while not being hit by a bullet 
    method void move(Gun gun) {
        var boolean moving_down;
        var boolean fired;
        var int key;
        let moving_down = true;
        let fired = false;
        while (~(gun.hit())) {
            let key = Keyboard.keyPressed();
            if (key = 32) {
                if (~fired) {
                    let fired = true;
                }
                do gun.fire(); 
            }
            if (y < 159 & (moving_down)) {
                do moveDown();
                let y = y + 1;
            }
            if (y = 159) {
                let moving_down = false;
            }
            if (y > 0 & ~(moving_down)) {
                do moveUp();
                let y = y - 1;
            }
            if (y = 0) {
                let moving_down = true;
            }
        }
        return;
    }

    // Returns |a-b|
    method int abs(int a, int b) {
        if (a > b) {
            return (a-b);
        }
        return (b-a);
    }

    // Checks whether the bullet hit the target
    method int calc_score() {
        var int center;
        var int diff;
        let center = y + 48;
        let diff = abs(120, center);
        if (diff < 10) {
            return 2;
        }
        if (diff < 50) {
            return 1;
        }
        return 0;
    }

    // Moves the target down
    method void moveDown() {
        do Screen.setColor(true);
        do Screen.drawLine(504, y + 96, 511, y + 96);
        do Screen.drawLine(496, y + 81, 503, y + 81);
        do Screen.drawLine(488, y + 65, 495, y + 65);
        do Screen.drawLine(484, y + 56, 487, y + 56);
        do Screen.drawLine(491, y + 35, 493, y + 35); 
        do Screen.setColor(false);
        do Screen.drawLine(504, y, 511, y);
        do Screen.drawLine(496, y + 16, 503, y + 16);
        do Screen.drawLine(488, y + 32, 495, y + 32);
        do Screen.drawLine(484, y + 40, 487, y + 40);
        do Screen.drawLine(491, y + 61, 493, y + 61);
        do Sys.wait(10);
        return;
    }

    // Moves the target up
    method void moveUp() {
        do Screen.setColor(true);
        do Screen.drawLine(504, y - 1, 511, y - 1);
        do Screen.drawLine(496, y + 15, 503, y + 15);
        do Screen.drawLine(488, y + 31, 495, y + 31);
        do Screen.drawLine(484, y + 39, 487, y + 39);
        do Screen.drawLine(491, y + 59, 493, y + 59);
        do Screen.setColor(false);
        do Screen.drawLine(504, y + 95, 511, y + 95);
        do Screen.drawLine(496, y + 80, 503, y + 80);
        do Screen.drawLine(488, y + 64, 495, y + 64);
        do Screen.drawLine(484, y + 55, 487, y + 55);
        do Screen.drawLine(491, y + 34, 493, y + 34);
        do Sys.wait(10);
        return;
    }

    // Disposes the target
    method void dispose() {
        do gun.disappear();
        do Memory.deAlloc(this);
        return;
    }
}